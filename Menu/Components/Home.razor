@page "/"
@inject NavigationManager Navigation
@inject IToastService ToastService
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>
<div class="container">
    <h2 class="header">Order Menu</h2>
    <FluentStack>
        @foreach (var item in Items)
        {
            <FluentCard Width="300px">
                <h3>@item.Name</h3>
                <h5>€ @item.Price</h5>
                <FluentButton OnClick="@(() => item.Count++)" Appearance="Appearance.Accent" IconStart="new Icons.Filled.Size20.Cart().WithColor(Color.Lightweight)">
                    
                    Add to Cart
                    <FluentCounterBadge Count="@item.Count" Appearance="Appearance.Lightweight" ShowWhen="@(count => count>0)" />
                </FluentButton>
                <div style="margin-top: 2%"></div>
                <FluentButton OnClick="@(() => {if (item.Count > 0) item.Count--;})" Disabled="@(item.Count==0)" IconStart="new Icons.Filled.Size20.Dismiss()">Remove</FluentButton>
            </FluentCard>
        }
    </FluentStack>
</div>
<div style="margin: 2% 0 0 68%">
    <FluentDialog @ref="_dialog" @bind-Hidden="@Hidden" aria-label="Simple dialog" Modal="true" TrapFocus="true" @ondialogdismiss=@(() => _dialog!.Hide())>
        <h2>Checkout</h2>
        <FluentStack HorizontalAlignment="HorizontalAlignment.Right">

            <FluentTextField @bind-value=Discount Placeholder="Discount code"></FluentTextField>
            @if (IsValidateClicked && IsValidDiscount(Discount))
            {

                <FluentButton OnClick="@(()=> { IsValidateClicked = true; ToastService.ShowSuccess("Discount applied"); })" Appearance="Appearance.Accent"
                              IconStart="new Icons.Filled.Size20.Checkmark().WithColor(Color.Lightweight)" Style="width: 100px">
                    Valid!
                </FluentButton>
            }
            else
            {
                <FluentButton OnClick="@(()=> { IsValidateClicked = true; })" Appearance="Appearance.Accent"
                              IconStart="new Icons.Filled.Size20.Dismiss().WithColor(Color.Lightweight)" Style="width: 100px">
                    Validate
                </FluentButton>

            }
        </FluentStack>
        <div style="margin-top: 2%"></div>
        <FluentStack HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Bottom">
            <h5>Total: €@GetTotal(Items)</h5>
 
            <FluentButton OnClick="OnPayment" Appearance="Appearance.Accent"
                          IconStart="new Icons.Filled.Size20.PaymentWireless().WithColor(Color.Lightweight)"
                          Disabled="@HasPaid">

                Card
            </FluentButton>
            <FluentButton OnClick="OnPayment" Appearance="Appearance.Accent"
                          IconStart="new Icons.Filled.Size20.MoneyHand().WithColor(Color.Lightweight)"
                          Disabled="@(GetTotal(Items)>10 || HasPaid)">
                Cash
            </FluentButton>
        </FluentStack>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="@(() => _dialog!.Hide())">Close dialog</FluentButton>
    </FluentDialog>
    <FluentButton OnClick="@(() => _dialog!.Show())" Appearance="Appearance.Accent"
        IconStart="new Icons.Filled.Size20.PaymentWireless().WithColor(Color.Lightweight)"
        Disabled="@(GetTotal(Items)==0)" class="header">
        Checkout
    </FluentButton>
    @if (Items.All(Item => Item.Count == 0))
    {
        HasPaid = false;
    }
</div>